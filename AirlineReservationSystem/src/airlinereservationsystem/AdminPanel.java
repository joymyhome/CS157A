/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package airlinereservationsystem;

import com.mysql.cj.jdbc.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLIntegrityConstraintViolationException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.time.LocalTime;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.text.ParseException;


/**
 *
 * @author isabellelow
 */
public class AdminPanel extends javax.swing.JFrame {

    public AdminPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jFlightTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        viewAllFlights = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        popularFlights = new javax.swing.JButton();
        flightLocTimeDiffDate = new javax.swing.JButton();
        topTwoDest = new javax.swing.JButton();
        CustNoBookings = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        insertFlight = new javax.swing.JButton();
        arriveDate = new com.toedter.calendar.JDateChooser();
        departDate = new com.toedter.calendar.JDateChooser();
        departTime = new javax.swing.JTextField();
        arriveTime = new javax.swing.JTextField();
        departLoc = new javax.swing.JTextField();
        destination = new javax.swing.JTextField();
        planeId = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        flightToBeDeleted = new javax.swing.JTextField();
        updateFlight = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        intFlightNum = new javax.swing.JTextField();
        numAvailableSeats = new javax.swing.JButton();
        deleteFlight = new javax.swing.JButton();
        archiveFlight = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        topDestDepartLoc = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        dateForArchive = new com.toedter.calendar.JDateChooser();
        archive = new javax.swing.JButton();
        custConfBookig = new javax.swing.JButton();
        custAndBookings = new javax.swing.JButton();
        updateAirlinePrices = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        intFlightNum1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        intFlightNum2 = new javax.swing.JTextField();
        custConfBookig1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        logOut = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Airline Reservation System Administrator");

        jFlightTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jFlightTable);

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(customerTable);

        viewAllFlights.setText("View All Flights");
        viewAllFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllFlightsActionPerformed(evt);
            }
        });

        jLabel2.setText("What would you like to do today?");

        jLabel3.setText("SEARCH FOR:");

        popularFlights.setText("Most popular flight(s)");
        popularFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popularFlightsActionPerformed(evt);
            }
        });

        flightLocTimeDiffDate.setText("Flights of same departure location and time but different dates");
        flightLocTimeDiffDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightLocTimeDiffDateActionPerformed(evt);
            }
        });

        topTwoDest.setText("Submit");
        topTwoDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topTwoDestActionPerformed(evt);
            }
        });

        CustNoBookings.setText("Registered customers without booked flights");
        CustNoBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustNoBookingsActionPerformed(evt);
            }
        });

        jLabel4.setText("MODIFICATION OF FLIGHTS:");

        jLabel5.setText("Insert New Flight:");

        jLabel7.setText("Departure Date:");

        jLabel8.setText("Arrival Date:");

        jLabel9.setText("Departure Time:");

        jLabel10.setText("Arrival Time:");

        jLabel11.setText("Dep. Location:");

        jLabel12.setText("Destination:");

        jLabel13.setText("Plane ID:");

        insertFlight.setText("Submit");
        insertFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertFlightActionPerformed(evt);
            }
        });

        departTime.setText("24HR FORMAT ");
        departTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departTimeActionPerformed(evt);
            }
        });

        arriveTime.setText("24HR FORMAT ");
        arriveTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arriveTimeActionPerformed(evt);
            }
        });

        departLoc.setText("IATA CODE");
        departLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departLocActionPerformed(evt);
            }
        });

        destination.setText("IATA CODE");
        destination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationActionPerformed(evt);
            }
        });

        jLabel6.setText("Delete Flight No.: ");

        updateFlight.setText("Update Existing Flight");
        updateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFlightActionPerformed(evt);
            }
        });

        jLabel15.setText("No. of available seats of flight no.:");

        intFlightNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intFlightNumActionPerformed(evt);
            }
        });

        numAvailableSeats.setText("Submit");
        numAvailableSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numAvailableSeatsActionPerformed(evt);
            }
        });

        deleteFlight.setText("Submit");
        deleteFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFlightActionPerformed(evt);
            }
        });

        archiveFlight.setText("View Archived Flights");
        archiveFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archiveFlightActionPerformed(evt);
            }
        });

        jLabel16.setText("Top two destinations from: ");

        topDestDepartLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topDestDepartLocActionPerformed(evt);
            }
        });

        jLabel14.setText("Archive flights before date:");

        archive.setText("Submit");
        archive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archiveActionPerformed(evt);
            }
        });

        custConfBookig.setText("View All Bookings");
        custConfBookig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custConfBookigActionPerformed(evt);
            }
        });

        custAndBookings.setText("View Customers Booked Flight 1 and Flight 2");
        custAndBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custAndBookingsActionPerformed(evt);
            }
        });

        updateAirlinePrices.setText("Update Airline Price");
        updateAirlinePrices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAirlinePricesActionPerformed(evt);
            }
        });

        jLabel17.setText("Flight 1 no.");

        intFlightNum1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intFlightNum1ActionPerformed(evt);
            }
        });

        jLabel18.setText("Flight 2 no.");

        intFlightNum2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intFlightNum2ActionPerformed(evt);
            }
        });

        custConfBookig1.setText("View Customers with Payments Above Average");
        custConfBookig1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custConfBookig1ActionPerformed(evt);
            }
        });

        logOut.setText("Options");

        jMenuItem1.setText("Log out");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        logOut.add(jMenuItem1);

        jMenuBar1.add(logOut);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(210, 210, 210))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(flightLocTimeDiffDate, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(CustNoBookings, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(popularFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(arriveTime, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(deleteFlight)
                                                    .addComponent(arriveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(50, 50, 50))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel15)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(intFlightNum, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel16)
                                                        .addGap(61, 61, 61)
                                                        .addComponent(topDestDepartLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(89, 89, 89)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(topTwoDest)
                                                    .addComponent(numAvailableSeats))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addGap(31, 31, 31))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel11)
                                                            .addComponent(jLabel13)
                                                            .addComponent(jLabel9)
                                                            .addComponent(jLabel7))
                                                        .addGap(31, 31, 31))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(jLabel6)
                                                        .addGap(18, 18, 18)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(flightToBeDeleted, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(departLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(departDate, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(departTime, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(planeId, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addGap(54, 54, 54)
                                                                .addComponent(insertFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(jLabel10)
                                                                    .addComponent(jLabel12)
                                                                    .addComponent(jLabel8)))))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel14)
                                                .addGap(18, 18, 18)
                                                .addComponent(dateForArchive, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(archive)
                                                .addGap(18, 18, 18)
                                                .addComponent(archiveFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(viewAllFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(updateFlight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(updateAirlinePrices, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(176, 176, 176)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(intFlightNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(intFlightNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(custAndBookings, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(custConfBookig, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(custConfBookig1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1147, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateFlight)
                            .addComponent(viewAllFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateAirlinePrices))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(custConfBookig)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateForArchive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(archive)
                                        .addComponent(archiveFlight)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(intFlightNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numAvailableSeats))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(topDestDepartLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(topTwoDest))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(flightLocTimeDiffDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CustNoBookings)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(popularFlights))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel17)
                                .addComponent(intFlightNum1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel18)
                                .addComponent(intFlightNum2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(custAndBookings)))
                        .addGap(352, 373, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(departDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(arriveDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(departTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)
                                    .addComponent(arriveTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(departLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)
                                    .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(planeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(insertFlight))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel6)
                                            .addComponent(flightToBeDeleted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(25, 25, 25))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteFlight)))))
                        .addContainerGap())))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(124, 124, 124)
                    .addComponent(custConfBookig1)
                    .addContainerGap(689, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewAllFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllFlightsActionPerformed
        viewAllFlights();
    }//GEN-LAST:event_viewAllFlightsActionPerformed

    private void popularFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popularFlightsActionPerformed
        viewMostPopularFlight();
    }//GEN-LAST:event_popularFlightsActionPerformed

    private void CustNoBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustNoBookingsActionPerformed
        viewCustNoBookings();
    }//GEN-LAST:event_CustNoBookingsActionPerformed

    private void insertFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertFlightActionPerformed
        insertFlight();
    }//GEN-LAST:event_insertFlightActionPerformed

    private void departTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departTimeActionPerformed
    }//GEN-LAST:event_departTimeActionPerformed

    private void arriveTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arriveTimeActionPerformed
    }//GEN-LAST:event_arriveTimeActionPerformed

    private void departLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departLocActionPerformed
    }//GEN-LAST:event_departLocActionPerformed

    private void destinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationActionPerformed
    }//GEN-LAST:event_destinationActionPerformed

    private void intFlightNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intFlightNumActionPerformed
    }//GEN-LAST:event_intFlightNumActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Logs admin out
        dispose();
        MainScreen main = new MainScreen();
        main.setLocationRelativeTo(null);
        main.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void numAvailableSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numAvailableSeatsActionPerformed
        // Searches for number of available seats of certain flight
        viewNumAvailSeats();
    }//GEN-LAST:event_numAvailableSeatsActionPerformed

    private void archiveFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archiveFlightActionPerformed
        viewAllArchivedFlights();
    }//GEN-LAST:event_archiveFlightActionPerformed

    private void flightLocTimeDiffDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightLocTimeDiffDateActionPerformed
        flightDepLocTimeDiffDate();
    }//GEN-LAST:event_flightLocTimeDiffDateActionPerformed

    private void topTwoDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topTwoDestActionPerformed
        viewTopTwoDest();
    }//GEN-LAST:event_topTwoDestActionPerformed

    private void topDestDepartLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topDestDepartLocActionPerformed
      
    }//GEN-LAST:event_topDestDepartLocActionPerformed

    private void deleteFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFlightActionPerformed
        deleteFlight();
    }//GEN-LAST:event_deleteFlightActionPerformed

    private void updateFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFlightActionPerformed
        updateFlight();
    }//GEN-LAST:event_updateFlightActionPerformed

    private void archiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archiveActionPerformed
        archiveFlights();
    }//GEN-LAST:event_archiveActionPerformed

    private void custConfBookigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custConfBookigActionPerformed
        viewAllBooking();
    }//GEN-LAST:event_custConfBookigActionPerformed

    private void custAndBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custAndBookingsActionPerformed
        viewCustBookedFlightAandB();
    }//GEN-LAST:event_custAndBookingsActionPerformed

    private void updateAirlinePricesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAirlinePricesActionPerformed
        UpdateAirlinePrice updateAirlinePrice = new UpdateAirlinePrice();
        updateAirlinePrice.setLocationRelativeTo(null);
        updateAirlinePrice.setVisible(true);
    }//GEN-LAST:event_updateAirlinePricesActionPerformed

    private void intFlightNum1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intFlightNum1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intFlightNum1ActionPerformed

    private void intFlightNum2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intFlightNum2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intFlightNum2ActionPerformed

    private void custConfBookig1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custConfBookig1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custConfBookig1ActionPerformed

    //Works
    private void viewAllFlights() {
        /**
         * Show all flights
         */
        /**
         * Show all flights
         */
         Getconnection con = new Getconnection();
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         try{
             Connection conn = con.getConnection();
             col.add("Flight ID");
             col.add("From");
             col.add("To");
             col.add("Departure Date");
             col.add("Arrival Date");
             col.add("Departure Time");
             col.add("Arrival Time");
             col.add("Price");
             col.add("Update at");
             String selectQuery = "Select flight_id, depart_date, arrival_date, depart_time, arrival_time, depart_loc, destination, plane_id, price, UPDATEAT "
                     + "from airline,price where depart_loc=location1 and destination=location2 order by flight_id";
             ResultSet rs = conn.createStatement().executeQuery(selectQuery);
             dat.clear();
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
             while(rs.next()){
                 Vector<String> v = new Vector<String>();
                 v.add(Integer.toString(rs.getInt("flight_id")));
                 v.add(rs.getString("depart_loc"));
                 v.add(rs.getString("destination"));
                 v.add(dateFormat.format(rs.getDate("depart_date")));
                 v.add(dateFormat.format(rs.getDate("arrival_date")));
                 v.add(timeFormat.format(rs.getTime("depart_time")));
                 v.add(timeFormat.format(rs.getTime("arrival_time")));
                 v.add(Integer.toString(rs.getInt("price")));
                 v.add(dateFormat.format(rs.getDate("UPDATEAT")));
             
                 dat.add(v);
             }
             
         }
         catch(Exception e){
             System.out.println("Failed populating data");
             e.printStackTrace();
         }
         jFlightTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
    }
    
    //Works 
    private void viewCustNoBookings() {
         Getconnection con = new Getconnection();
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         try{
             Connection conn = con.getConnection();
             col.add("Customer ID");
//             col.add("Name");
//             col.add("Phone");
//             col.add("Email");
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call unbooked_customers()");
             ResultSet rs = cs.executeQuery();
             dat.clear();
             while(rs.next()){
                 Vector<String> v = new Vector<String>();
                 v.add(Integer.toString(rs.getInt("custom_id")));
//                 v.add(rs.getString("name"));
//                 v.add(rs.getString("phone"));
//                 v.add(rs.getString("email"));
             
                 dat.add(v);
             }
             
         }
         catch(Exception e){
             System.out.println("Failed in populating data");
             e.printStackTrace();
         }
         customerTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
    }
    
    //Works
    private void viewMostPopularFlight() {
         Getconnection con = new Getconnection();
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         try{
             Connection conn = con.getConnection();
             col.add("Flight ID");
             col.add("Number of Tickets Sold");
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call most_popular_flight(?, ?)");
             cs.registerOutParameter(1, java.sql.Types.INTEGER);
             cs.registerOutParameter(2, java.sql.Types.INTEGER);
             
             cs.executeUpdate();
             dat.clear();
                 Vector<String> v = new Vector<String>();
                 v.add(Integer.toString(cs.getInt(1)));
                 v.add(Integer.toString(cs.getInt(2)));
             
                 dat.add(v);
             
         }
         catch(Exception e){
             System.out.println("Failed populating data");
             e.printStackTrace();
         }
         jFlightTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
    }
    
    //Works
    private void insertFlight() {
        Getconnection con = new Getconnection();
         
         try{
             Date departureDate = departDate.getDate();
             Date arrivalDate = arriveDate.getDate();
              
             DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
             Date departureTime = timeFormat.parse(departTime.getText());
             Date arrivalTime = timeFormat.parse(arriveTime.getText());      

             String from = departLoc.getText();
             String to = destination.getText();
             
             String airplaneId = planeId.getText();
             
             Connection conn = con.getConnection();
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call insert_airlines_schedule(?, ?, ?, ?, ?, ?, ?)");
           
             cs.setDate(1, new java.sql.Date(departureDate.getTime()));
             cs.setDate(2, new java.sql.Date(arrivalDate.getTime()));
             cs.setTime(3, new java.sql.Time(departureTime.getTime()));
             cs.setTime(4, new java.sql.Time(arrivalTime.getTime()));
             cs.setString(5, from);
             cs.setString(6, to);
             cs.setString(7, airplaneId);
             
             int count = cs.executeUpdate();
             if (count > 0)
                JOptionPane.showMessageDialog(null, "Flight successfully added.", "Message", JOptionPane.INFORMATION_MESSAGE);
             else
                JOptionPane.showMessageDialog(null, "Airline information incorrect", "Message", JOptionPane.INFORMATION_MESSAGE);
         }
         catch(Exception e){
             if (e instanceof SQLIntegrityConstraintViolationException) 
                 JOptionPane.showMessageDialog(null, "Airline information incorrect", "Message", JOptionPane.INFORMATION_MESSAGE);
             if (e instanceof ParseException)
                 JOptionPane.showMessageDialog(null, "Incomplete airline information", "Message", JOptionPane.INFORMATION_MESSAGE);
             System.out.println("Failed in insertion of data");
             //e.printStackTrace();
         }
    }
    
    private void archiveFlights() {
         Getconnection con = new Getconnection();
         Date priorDateToArchive = dateForArchive.getDate();
         
         try{
             Connection conn = con.getConnection();
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call archiveFlight(?)");
             cs.setDate(1, new java.sql.Date(priorDateToArchive.getTime()));
             
             cs.executeUpdate();
                  
         }
         catch(Exception e){
             System.out.println("Failed in populating data");
             e.printStackTrace();
         }
         
         JOptionPane.showMessageDialog(null, "Flight(s) successfully archived.", "Message", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void viewAllArchivedFlights() {
         Getconnection con = new Getconnection();
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         
         try{
             Connection conn = con.getConnection();
             col.add("Flight ID");
             col.add("From");
             col.add("To");
             col.add("Departure Date");
             col.add("Arrival Date");
             col.add("Departure Time");
             col.add("Arrival Time");
             col.add("Plane ID");
             col.add("Old Update Time");
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call viewArchivedFlights()");
             
             
             ResultSet rs = cs.executeQuery();
             dat.clear();
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
             while(rs.next()){
                 Vector<String> v = new Vector<String>();
                 v.add(Integer.toString(rs.getInt("a_flight_id")));
                 v.add(rs.getString("a_depart_loc"));
                 v.add(rs.getString("a_destination"));
                 v.add(dateFormat.format(rs.getDate("a_depart_date")));
                 v.add(dateFormat.format(rs.getDate("a_arrival_date")));
                 v.add(timeFormat.format(rs.getTime("a_depart_time")));
                 v.add(timeFormat.format(rs.getTime("a_arrival_time")));
                 v.add(Integer.toString(rs.getInt("a_plane_id")));
                 v.add(dateFormat.format(rs.getDate("old_update_time")));
             
                 dat.add(v);
             }
         }
         catch(Exception e){
             System.out.println("Failed populating data");
             e.printStackTrace();
         }
         jFlightTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
    }
    
    //Works
    private void flightDepLocTimeDiffDate() {
         Getconnection con = new Getconnection();
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         try{
             Connection conn = con.getConnection();
             col.add("Flight ID");
             col.add("Depart from");
             col.add("Depart at");
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call same_time_flight()");
             ResultSet rs = cs.executeQuery();
             dat.clear();
             DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
             while(rs.next()){
                 Vector<String> v = new Vector<String>();
                 v.add(Integer.toString(rs.getInt("flight_id")));    
                 v.add(rs.getString("depart_loc"));
                 v.add(timeFormat.format(rs.getTime("depart_time")));
                 
                 dat.add(v);
             }
             
         }
         catch(Exception e){
             System.out.println("Failed populating data");
             e.printStackTrace();
         }
         jFlightTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
    }
    
    //Works
    private void viewNumAvailSeats() {
         Getconnection con = new Getconnection();
         String flightNum = intFlightNum.getText();
         int convertedFlightNum = Integer.parseInt(flightNum);
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         try{
             Connection conn = con.getConnection();
             col.add("Number of Available Seats");
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call check_available_seats(?, ?)");
             cs.setInt(1, convertedFlightNum);
             cs.registerOutParameter(2, java.sql.Types.INTEGER);
             
             cs.executeUpdate();
             dat.clear();
                 Vector<String> v = new Vector<String>();
                 v.add(Integer.toString(cs.getInt(2)));
             
                 dat.add(v);
         }
         catch(Exception e){
             System.out.println("Failed in populating data");
             e.printStackTrace();
         }
         jFlightTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
    }
    
    //Works
    private void viewTopTwoDest() {
         Getconnection con = new Getconnection();
         String departLocation = topDestDepartLoc.getText();
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         try{
             Connection conn = con.getConnection();
             col.add("Top Two Destinations");
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call top_2_destination(?)");
             cs.setString(1, departLocation);
                          
             ResultSet rs = cs.executeQuery();
             dat.clear();
             while(rs.next()){
                 Vector<String> v = new Vector<String>();
                 v.add(rs.getString("destination"));
                 dat.add(v);
             }             
                   
         }
         catch(Exception e){
             System.out.println("Failed in populating data");
             e.printStackTrace();
         }
         jFlightTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
    }
    
    //Not sure if it works, do not want to delete any flights
    private void deleteFlight() {
        
        if (flightToBeDeleted.getText().equals("")){
            JOptionPane.showMessageDialog(null, "No flight id is provided", "Message", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            
        
         Getconnection con = new Getconnection();
         String flightId = flightToBeDeleted.getText();
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         try{
             Connection conn = con.getConnection();

             CallableStatement cs = (CallableStatement) conn.prepareCall("Call deleteFlight(?)");
             cs.setString(1, flightId);
             
             int count = cs.executeUpdate();
             if (count > 0) 
                JOptionPane.showMessageDialog(null, "Flight successfully deleted.", "Message", JOptionPane.INFORMATION_MESSAGE);
             else 
                JOptionPane.showMessageDialog(null, "Airline information incorrect.", "Message", JOptionPane.INFORMATION_MESSAGE);
         }
         catch(Exception e){
             if (e instanceof SQLIntegrityConstraintViolationException) 
                 JOptionPane.showMessageDialog(null, "Airline information incorrect", "Message", JOptionPane.INFORMATION_MESSAGE);
             System.out.println("Failed to delete flight");
             e.printStackTrace();
         }
        }
    }
    
    private void updateFlight() {
        UpdateFlight updateFlightWindow = new UpdateFlight();
        updateFlightWindow.setLocationRelativeTo(null);
        updateFlightWindow.setVisible(true);
    }
    
    private void viewCustPaidAboveAvg() {
        // show customer id and payments that are above average
        Getconnection con = new Getconnection();
        Vector<String> col = new Vector<String>();
        Vector<Vector> dat = new Vector<Vector>();
        try{
             Connection conn = con.getConnection();
             col.add("Customer ID");
             col.add("payment");
             CallableStatement cs = (CallableStatement) conn.prepareCall("Call userPayment()");
             ResultSet rs = cs.executeQuery();
             dat.clear();
             
             while(rs.next()){
                 Vector<String> v = new Vector<String>();
                 v.add(Integer.toString(rs.getInt("custom_id")));
                 v.add(Integer.toString(rs.getInt("payment")));
                 
                 dat.add(v);
             }
             
         }
         catch(Exception e){
             System.out.println("Failed populating data");
             e.printStackTrace();
         }
         customerTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
        
    }
    
    private void viewCustBookedFlightAandB() {
        
        if(intFlightNum1.getText().equals("") || intFlightNum2.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Flight 1 or Flight 2 is empty", "Message", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
        
            int flightnum1 = Integer.parseInt(intFlightNum1.getText());
            int flightnum2 = Integer.parseInt(intFlightNum2.getText());
            Getconnection con = new Getconnection();

            Vector<String> col = new Vector<String>();
            Vector<Vector> dat = new Vector<Vector>();
            try{
                Connection conn = con.getConnection();
                col.add("Customer ID");
                CallableStatement cs = (CallableStatement) conn.prepareCall("Call userBooked(?, ?)");
                cs.setInt(1, flightnum1);
                cs.setInt(2, flightnum2);
                ResultSet rs = cs.executeQuery();
                dat.clear();
                while(rs.next()){
                    Vector<String> v = new Vector<String>();
                    v.add(Integer.toString(rs.getInt("custom_id")));
                    
                    dat.add(v);
                }

            }
             catch(Exception e){
                 System.out.println("Failed populating data");
                 e.printStackTrace();
             }
             customerTable.setModel(new DefaultTableModel(dat, col){
                 @Override
                 public boolean isCellEditable(int row, int column) {
                    return false;
                 }
             });
        }
    }
    private void viewAllBooking(){
        Getconnection con = new Getconnection();
         
         Vector<String> col = new Vector<String>();
         Vector<Vector> dat = new Vector<Vector>();
         try{
             Connection conn = con.getConnection();
             col.add("Ticket id");
             col.add("Custom id");
             col.add("Flight id");
             col.add("Payment");
             String selectQuery = "Select * from booking";
             ResultSet rs = conn.createStatement().executeQuery(selectQuery);
             dat.clear();
             while(rs.next()){
                 Vector<String> v = new Vector<String>();
                 v.add(Integer.toString(rs.getInt("ticket_id")));
                 v.add(Integer.toString(rs.getInt("custom_id")));
                 v.add(Integer.toString(rs.getInt("flight_id")));
                 v.add(Integer.toString(rs.getInt("payment")));
             
                 dat.add(v);
             }
             
         }
         catch(Exception e){
             System.out.println("Failed populating data");
             e.printStackTrace();
         }
         jFlightTable.setModel(new DefaultTableModel(dat, col){
             @Override
             public boolean isCellEditable(int row, int column) {
                return false;
             }
         });
    }

        
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CustNoBookings;
    private javax.swing.JButton archive;
    private javax.swing.JButton archiveFlight;
    private com.toedter.calendar.JDateChooser arriveDate;
    private javax.swing.JTextField arriveTime;
    private javax.swing.JButton custAndBookings;
    private javax.swing.JButton custConfBookig;
    private javax.swing.JButton custConfBookig1;
    private javax.swing.JTable customerTable;
    private com.toedter.calendar.JDateChooser dateForArchive;
    private javax.swing.JButton deleteFlight;
    private com.toedter.calendar.JDateChooser departDate;
    private javax.swing.JTextField departLoc;
    private javax.swing.JTextField departTime;
    private javax.swing.JTextField destination;
    private javax.swing.JButton flightLocTimeDiffDate;
    private javax.swing.JTextField flightToBeDeleted;
    private javax.swing.JButton insertFlight;
    private javax.swing.JTextField intFlightNum;
    private javax.swing.JTextField intFlightNum1;
    private javax.swing.JTextField intFlightNum2;
    private javax.swing.JTable jFlightTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu logOut;
    private javax.swing.JButton numAvailableSeats;
    private javax.swing.JTextField planeId;
    private javax.swing.JButton popularFlights;
    private javax.swing.JTextField topDestDepartLoc;
    private javax.swing.JButton topTwoDest;
    private javax.swing.JButton updateAirlinePrices;
    private javax.swing.JButton updateFlight;
    private javax.swing.JButton viewAllFlights;
    // End of variables declaration//GEN-END:variables
}
